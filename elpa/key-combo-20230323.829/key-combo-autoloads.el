;;; key-combo-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from key-combo.el

(autoload 'key-combo-define "key-combo" "\
In KEYMAP, define key sequence KEY as COMMANDS.
KEYMAP is a keymap.

KEY is a string or a vector of symbols and characters meaning a
sequence of keystrokes and events.  Non-ASCII characters with codes
above 127 (such as ISO Latin-1) can be included if you use a vector.

COMMANDS can be an interactive function, a string, nil, or list of these COMMAND.
If COMMANDS is string, treated as a smartchr flavor keyboard macro.
If COMMANDS is nil, the key-chord is removed.
If COMMANDS is list, treated as sequential commands.

(fn KEYMAP KEY COMMANDS)")
 
(autoload 'key-combo-define-local "key-combo" "\
Give KEY a local binding as COMMAND.

See also `key-combo-define'

The binding goes in the current buffer's local map,
which in most cases is shared with all other buffers in the same major mode.

(fn KEYS COMMAND)")
(autoload 'key-combo-define-hook "key-combo" "\


(fn HOOKS NAME KEYS)" nil t)
(autoload 'key-combo-load-default "key-combo" nil t)
(autoload 'key-combo-mode "key-combo" "\
Toggle key combo.

This is a minor mode.  If called interactively, toggle the `Key-Combo
mode' mode.  If the prefix argument is positive, enable the mode, and if
it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `key-combo-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(put 'global-key-combo-mode 'globalized-minor-mode t)
(defvar global-key-combo-mode nil "\
Non-nil if Global Key-Combo mode is enabled.
See the `global-key-combo-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-key-combo-mode'.")
(custom-autoload 'global-key-combo-mode "key-combo" nil)
(autoload 'global-key-combo-mode "key-combo" "\
Toggle Key-Combo mode in all buffers.
With prefix ARG, enable Global Key-Combo mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Key-Combo mode is enabled in all buffers where `key-combo-mode-maybe'
would do it.

See `key-combo-mode' for more information on Key-Combo mode.

(fn &optional ARG)" t)
(register-definition-prefixes "key-combo" '("define-key-combo-load" "key-combo" "multiple-cursors-mode"))

;;; End of scraped data

(provide 'key-combo-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; key-combo-autoloads.el ends here
